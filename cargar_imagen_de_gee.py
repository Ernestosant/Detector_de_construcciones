# -*- coding: utf-8 -*-
"""cargar imagen de GEE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KJ5n50c1jMlLJ0FvtXU4hmmqSzEmziGg
"""

import ee
import numpy as np

service_account = 'datard-gee@datasciencerd.iam.gserviceaccount.com'
credentials = ee.ServiceAccountCredentials(service_account, 'datasciencerd-fc8255e59ea1.json')
ee.Initialize(credentials)

# Define an area of interest.
# aoi es la región de interés que coincide con los bounds
"""aoi = ee.Geometry.Polygon(
  [[[-110.8, 44.7],
    [-110.8, 44.6],
    [-110.6, 44.6],
    [-110.6, 44.7]]], None, False)
"""

def loadSatImage(aoi):
    # Define an image.
  img = ee.Image('LANDSAT/LC08/C01/T1_SR/LC08_038029_20180810') \
    .select(['B4', 'B5', 'B6'])



  # Get 2-d pixel array for AOI - returns feature with 2-D pixel array as property per band.
  band_arrs = img.sampleRectangle(region=aoi)

  # Get individual band arrays.
  band_arr_b4 = band_arrs.get('B4')
  band_arr_b5 = band_arrs.get('B5')
  band_arr_b6 = band_arrs.get('B6')

  # Transfer the arrays from server to client and cast as np array.
  np_arr_b4 = np.array(band_arr_b4.getInfo())
  np_arr_b5 = np.array(band_arr_b5.getInfo())
  np_arr_b6 = np.array(band_arr_b6.getInfo())


  # Expand the dimensions of the images so they can be concatenated into 3-D.
  np_arr_b4 = np.expand_dims(np_arr_b4, 2)
  np_arr_b5 = np.expand_dims(np_arr_b5, 2)
  np_arr_b6 = np.expand_dims(np_arr_b6, 2)


  # Stack the individual bands to make a 3-D array.
  rgb_img = np.concatenate((np_arr_b6, np_arr_b5, np_arr_b4), 2)
  #print(rgb_img.shape)

  # Scale the data to [0, 255] to show as an RGB image.
  rgb_img_test = (255*((rgb_img - 100)/3500)).astype('uint8')
  return rgb_img_test